<?php
/**
 * Register and output open graph tags, Twitter cards, custom color CSS, and the icon fonts.
 *
 * @package   SocialWarfare\Functions
 * @copyright Copyright (c) 2016, Warfare Plugins, LLC
 * @license   GPL-3.0+
 * @since     1.0.0
 */

defined( 'WPINC' ) || die;

/**
 *  Queue up our hook function which will in turn call all of Social Warfare's custom hooks
 */
add_action( 'wp_head' , 'swp_add_header_meta' , 1 );

/**
 * The function that we're hooking into the header
 *
 * All other items being added to the header will be hooked into
 * swp_meta_tags which we will call and print via this function.
 *
 * @since 1.4.0
 * @access public
 * @param  none
 * @return none
 */
function swp_add_header_meta() {

	global $swp_user_options;

	$info['postID'] = get_the_ID();

	/**
	 * Create and return the values to be used in the header meta tags SAMConnection
	 *
	 * All meta values will be returned in the $info['meta_tag_values'] array.
	 *
	 * The following values will be returned from the function swp_open_graph_values():
	 * Open Graph Type:			$info['meta_tag_values']['og_type']
	 * Open Graph Title: 		$info['meta_tag_values']['og_title']
	 * Open Graph Description: 	$info['meta_tag_values']['og_description']
	 * Open Graph Image:		$info['meta_tag_values']['og_image']
	 * Open Graph Image Width:	$info['meta_tag_values']['og_image_width']
	 * Open Graph Image Height:	$info['meta_tag_values']['og_image_height']
	 * Open Graph URL:			$info['meta_tag_values']['og_url']
	 * Open Graph Site Name:	$info['meta_tag_values']['og_site_name']
	 * Article Author: 			$info['meta_tag_values']['article_author']
	 * Article Publisher: 		$info['meta_tag_values']['article_publisher']
	 * Article Published Time:	$info['meta_tag_values']['article_published_time']
	 * Article Modified Time:	$info['meta_tag_values']['article_modified_time']
	 * OG Modified Time:		$info['meta_tag_values']['og_modified_time']
	 * Facebook App ID			$info['meta_tag_values']['fb_app_id']
	 *
	 * The following values will be returned from the function swp_twitter_card_values():
	 * Twitter Card type		$info['meta_tag_values']['twitter_card']
	 * Twitter Title			$info['meta_tag_values']['twitter_title']
	 * Twitter Description		$info['meta_tag_values']['twitter_description']
	 * Twitter Image			$info['meta_tag_values']['twitter_image']
	 * Twitter Site				$info['meta_tag_values']['twitter_site']
	 *
	 * @since 2.1.4
	 * @access public
	 * @var array $info An array of information
	 * @return array $info The modified array with the 'meta_tag_values' index populated
	 */
	$info = apply_filters( 'swp_header_values' , $info );
	var_dump($info);
	/**
	 * A filter to take the values from above and compile them into their html format
	 *
	 * This filter will take the values from $info['meta_tag_values'] and compile
	 * them into html stored in the $info['html_output'] index. This index will be
	 * a string that gets added to by each hook (.=), not an array.
	 *
	 * Note: Each meta tag should end with PHP_EOL for clean structured HTML output
	 *
	 * @since 2.1.4
	 * @access public
	 * @var array $info An array of information
	 * @return array $info The modified array with the 'html_output' index populated.
	 */
	$info['html_output'] = '';
	$info = apply_filters( 'swp_header_html' , $info );

	if ( $info['html_output'] ) :
		echo PHP_EOL . '<!-- Open Graph Meta Tags & Twitter Card generated by Social Warfare v' . SWP_VERSION . ' http://warfareplugins.com -->';
		echo $info['html_output'];
		echo PHP_EOL . '<!-- Open Graph Meta Tags & Twitter Card generated by Social Warfare v' . SWP_VERSION . ' http://warfareplugins.com -->' . PHP_EOL . PHP_EOL;
	endif;
}

/**
 * Open Graph Tags Values
 *
 * Notes: If the user specifies an Open Graph tag,
 * we're going to develop a complete set of tags. Order
 * of preference for each tag is as follows:
 * 1. Did they fill out our open graph field?
 * 2. Did they fill out Yoast's social field?
 * 3. Did they fill out Yoast's SEO field?
 * 4. We'll just auto-generate the field from the post.
 *
 * @since  2.1.4
 * @access public
 * @param  array $info An array of data about the post
 * @return array $info The modified array
 */
add_filter('swp_header_values', 'swp_open_graph_values' );
function swp_open_graph_values($info){

	global $swp_user_options;

	/**
	 * Begin by fetching the user's default custom settings
	 *
	 */
	$custom_og_title 		= htmlspecialchars( get_post_meta( $info['postID'] , 'nc_ogTitle' , true ) );
	$custom_og_description 	= htmlspecialchars( get_post_meta( $info['postID'] , 'nc_ogDescription' , true ) );
	$custom_og_image_id		= get_post_meta( $info['postID'] , 'nc_ogImage' , true );
	$custom_og_image_url 	= get_post_meta( $info['postID'] , 'swp_open_graph_image_url' , true );
	$custom_og_image_data 	= json_decode( get_post_meta( $info['postID'] , 'swp_open_graph_image_data' , true ) );

	/**
	 * Open Graph Tags (The Easy Ones That Don't Need Conditional Fallbacks)
	 *
	 */
	$info['meta_tag_values']['og_url'] 					= get_permalink();
	$info['meta_tag_values']['og_site_name']			= get_bloginfo( 'name' );
	$info['meta_tag_values']['og_type'] 				= 'article';
	$info['meta_tag_values']['article_published_time'] 	= get_post_time( 'c' );
	$info['meta_tag_values']['article_modified_time']  	= get_post_modified_time( 'c' );
	$info['meta_tag_values']['og_modified_time']  		= get_post_modified_time( 'c' );

	/**
	 * Disable Jetpack's Open Graph tags
	 *
	 */
	if ( class_exists( 'JetPack' ) ) :
		add_filter( 'jetpack_enable_opengraph', '__return_false', 99 );
		add_filter( 'jetpack_enable_open_graph', '__return_false', 99 );
	endif;

	/**
	 * Check for and coordinate with Yoast to create the best possible values for each tag
	 *
	 */
	if ( defined( 'WPSEO_VERSION' ) ) :
		global $wpseo_og;
		$yoast_og_setting = has_action( 'wpseo_head', array( $wpseo_og, 'opengraph' ) );
	else :
		$yoast_og_setting = false;
	endif;

	// Check if the user has filled out at least one of the custom fields
	if ( defined( 'WPSEO_VERSION' ) && ( !empty( $custom_og_title ) || !empty( $custom_og_description ) || !empty( $custom_og_image ) ) ):

		/**
		 * YOAST SEO: It rocks, so if it's installed, let's coordinate with it
		 *
		 */

		// Collect their Social Descriptions as backups if they're not defined in ours
		$yoast_og_title 		= get_post_meta( $info['postID'] , '_yoast_wpseo_opengraph-title' , true );
		$yoast_og_description 	= get_post_meta( $info['postID'] , '_yoast_wpseo_opengraph-description' , true );
		$yoast_og_image 		= get_post_meta( $info['postID'] , '_yoast_wpseo_opengraph-image' , true );
		$yoast_seo_title		= get_post_meta( $info['postID'] , '_yoast_wpseo_title' , true );
		$yoast_seo_description	= get_post_meta( $info['postID'] , '_yoast_wpseo_metadesc' , true );

		// Cancel their output if ours have been defined so we don't have two sets of tags
		global $wpseo_og;
		remove_action( 'wpseo_head', array( $wpseo_og, 'opengraph' ), 30 );

		// Fetch the WPSEO_SOCIAL Values
		$wpseo_social = get_option( 'wpseo_social' );

	// End of the Yoast Conditional
	endif;

	/**
	 *  Open Graph Title: Create an open graph title meta tag
	 *
	 */
	if ( $custom_og_title ) :
		$info['meta_tag_values']['og_title'] = $custom_og_title;
	elseif ( !empty( $yoast_og_title )) :
		$info['meta_tag_values']['og_title'] = $yoast_og_title;
	elseif ( !empty( $yoast_seo_title ) ) :
		$info['meta_tag_values']['og_title'] = $yoast_seo_title;
	else :
		$info['meta_tag_values']['og_title'] = trim( convert_smart_quotes( htmlspecialchars_decode( get_the_title() ) ) );
	endif;

	/**
	 * Open Graph Description
	 *
	 */
	if ( $custom_og_description ) :
		$info['meta_tag_values']['og_description'] = $custom_og_description;
	elseif ( !empty( $yoast_og_description ) ) :
		$info['meta_tag_values']['og_description'] = $yoast_og_description;
	elseif ( !empty( $yoast_seo_description ) ) :
		$info['meta_tag_values']['og_description'] = $yoast_seo_description;
	else :
		$info['meta_tag_values']['og_description'] = convert_smart_quotes( htmlspecialchars_decode( swp_get_excerpt_by_id( $info['postID'] ) ) ) ;
	endif;

	/**
	 * Open Graph image
	 *
	 */
	if ( $custom_og_image_url ) :
		$info['meta_tag_values']['og_image'] = $custom_og_image_url;
	elseif ( !empty( $yoast_og_image ) ) :
		$info['meta_tag_values']['og_image'] = $yoast_og_image;
	else :
		$thumbnail_url = get_post_meta( $info['postID'] , 'swp_open_thumbnail_url' , true );
		if ( $thumbnail_url ) :
			$info['meta_tag_values']['og_image'] = $thumbnail_url;
		endif;
	endif;

	/**
	 * Open Graph Image Dimensions
	 *
	 */
	if ( !empty( $custom_og_image_data ) ) :
		$info['meta_tag_values']['og_image_width'] 	= $custom_og_image_data[1];
		$info['meta_tag_values']['og_image_height']	= $custom_og_image_data[2];
	endif;

	/**
	 * Facebook Author
	 *
	 */
	if ( get_the_author_meta( 'swp_fb_author' , swp_get_author( $info['postID'] ) ) ) :
		$info['meta_tag_values']['article_author'] = get_the_author_meta( 'swp_fb_author' , swp_get_author( $info['postID'] ) );
	elseif ( get_the_author_meta( 'facebook' , swp_get_author( $info['postID'] ) ) && defined( 'WPSEO_VERSION' ) ) :
		$info['meta_tag_values']['article_author'] = get_the_author_meta( 'facebook' , swp_get_author( $info['postID'] ) );
	endif;

	/**
	 * Open Graph Publisher
	 *
	 */
	if ( !empty( $swp_user_options['facebookPublisherUrl'] )) :
		$info['meta_tag_values']['article_publisher'] = $swp_user_options['facebookPublisherUrl'];
	elseif ( isset( $wpseo_social ) && !empty( $wpseo_social['facebook_site'] ) ) :
		$info['meta_tag_values']['article_publisher'] = $wpseo_social['facebook_site'];
	endif;

	/**
	 * Open Graph App ID
	 *
	 */
	if ( !empty( $swp_user_options['facebookAppID'] ) ) :
		$info['meta_tag_values']['fb_app_id'] = $swp_user_options['facebookAppID'];
	elseif ( isset( $wpseo_social ) && !empty( $wpseo_social['fbadminapp'] ) ) :
		$info['meta_tag_values']['fb_app_id'] = $wpseo_social['fbadminapp'];
	else :
		$info['meta_tag_values']['fb_app_id'] = '529576650555031';
	endif;

	return $info;
}

/**
 * Quote up all of our header functions via swp_meta_tags
 */
if ( is_swp_registered() ) :
	add_filter( 'swp_meta_tags' , 'swp_open_graph_tags' , 1 );
	add_filter( 'swp_meta_tags' , 'swp_add_twitter_card' , 2 );
endif;

add_filter( 'swp_meta_tags' , 'swp_output_custom_color' , 4 );
add_filter( 'swp_meta_tags' , 'swp_output_font_css' , 5 );
add_action( 'admin_head'   , 'swp_output_font_css' , 10 );

/**
 * Open Graph Tags
 *
 * Notes: If the user specifies an Open Graph tag,
 * we're going to develop a complete set of tags. Order
 * of preference for each tag is as follows:
 * 1. Did they fill out our open graph field?
 * 2. Did they fill out Yoast's social field?
 * 3. Did they fill out Yoast's SEO field?
 * 4. We'll just auto-generate the field from the post.
 *
 * @since  1.0.0
 * @access public
 * @param  array $info An array of data about the post
 * @return array $info The modified array
 */
function swp_open_graph_tags( $info ) {

	// We only modify the Open Graph tags on single blog post pages
	if ( is_singular() ) :

		// If Yoast Open Graph is activated, we only output Open Graph tags if the user has filled out at least one field
		// Then we'll work along with Yoast to make sure all fields get filled properly
		if ( defined( 'WPSEO_VERSION' ) ) :
			global $wpseo_og;
			$yoast_og_setting = has_action( 'wpseo_head', array( $wpseo_og, 'opengraph' ) );
		else :
			$yoast_og_setting = false;
		endif;

		if (
			(isset( $info['title'] ) && $info['title']) ||
			(isset( $info['description'] ) && $info['description']) ||
			(isset( $info['imageURL'] ) && $info['imageURL']) ||
			! $yoast_og_setting
		) :

			/**
			 * YOAST SEO: It rocks, so let's coordinate with it
			 */

			// Check if Yoast Exists so we can coordinate output with their plugin accordingly
			if ( defined( 'WPSEO_VERSION' ) ) :

				// Collect their Social Descriptions as backups if they're not defined in ours
				$yoast_og_title 		= get_post_meta( $info['postID'] , '_yoast_wpseo_opengraph-title' , true );
				$yoast_og_description 	= get_post_meta( $info['postID'] , '_yoast_wpseo_opengraph-description' , true );
				$yoast_og_image 		= get_post_meta( $info['postID'] , '_yoast_wpseo_opengraph-image' , true );

				// Collect their SEO fields as 3rd string backups in case we need them
				$yoast_seo_title		= get_post_meta( $info['postID'] , '_yoast_wpseo_title' , true );
				$yoast_seo_description	= get_post_meta( $info['postID'] , '_yoast_wpseo_metadesc' , true );

				// Cancel their output if ours have been defined so we don't have two sets of tags
				global $wpseo_og;
				remove_action( 'wpseo_head', array( $wpseo_og, 'opengraph' ), 30 );

				// Fetch the WPSEO_SOCIAL Values
				$wpseo_social = get_option( 'wpseo_social' );

			endif;

			// Add all our Open Graph Tags to the Return Header Output
			$info['header_output'] .= PHP_EOL . '<meta property="og:type" content="article" /> ';

			/**
			 * Disable Jetpack's Open Graph tags
			 */

			if ( class_exists( 'JetPack' ) ) :
				add_filter( 'jetpack_enable_opengraph', '__return_false', 99 );
				add_filter( 'jetpack_enable_open_graph', '__return_false', 99 );
			endif;

			/**
			 * Open Graph title
			 *
			 */

			// Open Graph Title: Create an open graph title meta tag
			if ( $info['title'] ) :

				// If the user defined an social media title, let's use it.
				$info['header_output'] .= PHP_EOL . '<meta property="og:title" content="' . $info['title'] . '" />';

			elseif ( isset( $yoast_og_title ) && $yoast_og_title ) :

				// If the user defined an title over in Yoast, let's use it.
				$info['header_output'] .= PHP_EOL . '<meta property="og:title" content="' . trim( $yoast_og_title ) . '" />';

			elseif ( isset( $yoast_seo_title ) && $yoast_seo_title ) :

				// If the user defined an title over in Yoast, let's use it.
				$info['header_output'] .= PHP_EOL . '<meta property="og:title" content="' . trim( $yoast_seo_title ) . '" />';

			else :

				// If nothing else is defined, let's use the post title
				$info['header_output'] .= PHP_EOL . '<meta property="og:title" content="' . trim( convert_smart_quotes( htmlspecialchars_decode( get_the_title() ) ) ) . '" />';

			endif;

			/**
			 * Open Graph Description
			 *
			 */

			// Open Graph Description: Create an open graph description meta tag
			if ( $info['description'] ) :

				// If the user defined an social media description, let's use it.
				$info['header_output'] .= PHP_EOL . '<meta property="og:description" content="' . $info['description'] . '" />';

			elseif ( isset( $yoast_og_description ) && $yoast_og_description ) :

				// If the user defined an description over in Yoast, let's use it.
				$info['header_output'] .= PHP_EOL . '<meta property="og:description" content="' . $yoast_og_description . '" />';

			elseif ( isset( $yoast_seo_description ) && $yoast_seo_description ) :

				// If the user defined an description over in Yoast, let's use it.
				$info['header_output'] .= PHP_EOL . '<meta property="og:description" content="' . $yoast_seo_description . '" />';

			else :

				// If nothing else is defined, let's use the post excerpt
				$info['header_output'] .= PHP_EOL . '<meta property="og:description" content="' . convert_smart_quotes( htmlspecialchars_decode( swp_get_excerpt_by_id( $info['postID'] ) ) ) . '" />';

			endif;

			/**
			 * Open Graph image
			 *
			 */

			// Open Graph Image: Create an open graph image meta tag
			if ( $info['imageURL'] ) :

				// If the user defined an image, let's use it.
				$info['header_output'] .= PHP_EOL . '<meta property="og:image" content="' . $info['imageURL'] . '" />';
				$image_output = true;

			elseif ( isset( $yoast_og_image ) && $yoast_og_image ) :

				// If the user defined an image over in Yoast, let's use it.
				$info['header_output'] .= PHP_EOL . '<meta property="og:image" content="' . $yoast_og_image . '" />';
				$image_output = true;

			else :

				// If nothing else is defined, let's use the post Thumbnail as long as we have the URL cached
				$og_image = get_post_meta( $info['postID'] , 'swp_open_thumbnail_url' , true );
				if ( $og_image ) :
					$image_output = true;
					$info['header_output'] .= PHP_EOL . '<meta property="og:image" content="' . $og_image . '" />';
				endif;

			endif;
			/**
			 * Open Graph Dimensions
			 *
			 */
			if ( isset( $info['image_data'] ) && $info['image_data'] && isset( $image_output ) && $image_output == true ) :

				$info['header_output'] .= PHP_EOL . '<meta property="og:image:width" content="' . $info['image_data'][1] . '" />';
				$info['header_output'] .= PHP_EOL . '<meta property="og:image:height" content="' . $info['image_data'][2] . '" />';

			elseif ( get_post_meta( $info['postID'] , 'swp_open_graph_image_data' , true ) && isset( $image_output ) && $image_output == true ) :

				$info['image_data'] = json_decode( get_post_meta( $info['postID'] , 'swp_open_graph_image_data' , true ) );
				$info['header_output'] .= PHP_EOL . '<meta property="og:image:width" content="' . $info['image_data'][1] . '" />';
				$info['header_output'] .= PHP_EOL . '<meta property="og:image:height" content="' . $info['image_data'][2] . '" />';

			endif;
			/**
			 * Open Graph URL and Site name
			 *
			 */

			$info['header_output'] .= PHP_EOL . '<meta property="og:url" content="' . get_permalink() . '" />';
			$info['header_output'] .= PHP_EOL . '<meta property="og:site_name" content="' . get_bloginfo( 'name' ) . '" />';

			/**
			 * Facebook Author
			 *
			 */

			// Add the Facebook Author URL
			if ( get_the_author_meta( 'swp_fb_author' , swp_get_author( $info['postID'] ) ) ) :

				// Output the Facebook Author URL
				$facebook_author = get_the_author_meta( 'swp_fb_author' , swp_get_author( $info['postID'] ) );
				$info['header_output'] .= PHP_EOL . '<meta property="article:author" content="' . $facebook_author . '" />';

			elseif ( get_the_author_meta( 'facebook' , swp_get_author( $info['postID'] ) ) && defined( 'WPSEO_VERSION' ) ) :

				// Output the Facebook Author URL
				$facebook_author = get_the_author_meta( 'facebook' , swp_get_author( $info['postID'] ) );
				$info['header_output'] .= PHP_EOL . '<meta property="article:author" content="' . $facebook_author . '" />';

			endif;

			/**
			 * Open Graph Publisher
			 *
			 */

			// If they have a Facebook Publisher URL in our settings...
			if ( isset( $info['swp_user_options']['facebookPublisherUrl'] ) && $info['swp_user_options']['facebookPublisherUrl'] != '' ) :

				// Output the Publisher URL
				$info['header_output'] .= PHP_EOL . '<meta property="article:publisher" content="' . $info['swp_user_options']['facebookPublisherUrl'] . '" />';

				// If they have a Facebook Publisher URL in Yoast's settings...
			elseif ( isset( $wpseo_social ) && isset( $wpseo_social['facebook_site'] ) && $wpseo_social['facebook_site'] != '' ) :

				// Output the Publisher URL
				$info['header_output'] .= PHP_EOL . '<meta property="article:publisher" content="' . $wpseo_social['facebook_site'] . '" />';
			endif;

			$info['header_output'] .= PHP_EOL . '<meta property="article:published_time" content="' . get_post_time( 'c' ) . '" />';
			$info['header_output'] .= PHP_EOL . '<meta property="article:modified_time" content="' . get_post_modified_time( 'c' ) . '" />';
			$info['header_output'] .= PHP_EOL . '<meta property="og:updated_time" content="' . get_post_modified_time( 'c' ) . '" />';

			/**
			 * Open Graph App ID
			 *
			 */

			// If the Facebook APP ID is in our settings...
			if ( isset( $info['swp_user_options']['facebookAppID'] ) && $info['swp_user_options']['facebookAppID'] != '' ) :

				// Output the Facebook APP ID
				$info['header_output'] .= PHP_EOL . '<meta property="fb:app_id" content="' . $info['swp_user_options']['facebookAppID'] . '" />';

				// If the Facebook APP ID is set in Yoast's settings...
			elseif ( isset( $wpseo_social ) && isset( $wpseo_social['fbadminapp'] ) && $wpseo_social['fbadminapp'] != '' ) :

				// Output the Facebook APP ID
				$info['header_output'] .= PHP_EOL . '<meta property="fb:app_id" content="' . $wpseo_social['fbadminapp'] . '" />';

			else :

				// Output the Facebook APP ID
				$info['header_output'] .= PHP_EOL . '<meta property="fb:app_id" content="529576650555031" />';

			endif;

		endif;
	endif;

	// Return the variable containing our information for the meta tags
	return $info;

}

/**
 * Twitter cards
 *
 *	Notes: If the user has Twitter cards turned on, we
 *	need to generate them, but we also like Yoast so we'll
 *	pay attention to their settings as well. Here's the order
 *	of preference for each field:
 *	1. Did the user fill out the Social Media field?
 *	2. Did the user fill out the Yoast Twitter Field?
 *	3. Did the user fill out the Yoast SEO field?
 *	4. We'll auto generate something logical from the post.
 *
 * @since 1.4.0
 * @access public
 * @param array $info An array of information about the post
 * @return array $info The modified array
 */
function swp_add_twitter_card( $info ) {
	if ( is_singular() ) :
		// Check if Twitter Cards are Activated
		if ( $info['swp_user_options']['swp_twitter_card'] ) :

			/**
			 * YOAST SEO: It rocks, so let's coordinate with it
			 *
			 */

			// Check if Yoast Exists so we can coordinate output with their plugin accordingly
			if ( defined( 'WPSEO_VERSION' ) ) :

				// Collect their Social Descriptions as backups if they're not defined in ours
				$yoast_twitter_title 		= get_post_meta( $info['postID'] , '_yoast_wpseo_twitter-title' , true );
				$yoast_twitter_description 	= get_post_meta( $info['postID'] , '_yoast_wpseo_twitter-description' , true );
				$yoast_twitter_image 		= get_post_meta( $info['postID'] , '_yoast_wpseo_twitter-image' , true );

				// Collect their SEO fields as 3rd string backups in case we need them
				$yoast_seo_title			= get_post_meta( $info['postID'] , '_yoast_wpseo_title' , true );
				$yoast_seo_description		= get_post_meta( $info['postID'] , '_yoast_wpseo_metadesc' , true );

				// Cancel their output if ours have been defined so we don't have two sets of tags
				remove_action( 'wpseo_head' , array( 'WPSEO_Twitter', 'get_instance' ) , 40 );

			endif;

			/**
			 * JET PACK: If ours are activated, disable theirs
			 *
			 */

			if ( class_exists( 'JetPack' ) ) :

				add_filter( 'jetpack_disable_twitter_cards', '__return_true', 99 );

			endif;

			/**
			 * TWITTER TITLE
			 *
			 */

			// If the user defined a Social Media title, use it, otherwise check for Yoast's
			if ( ! $info['title'] && isset( $yoast_twitter_title ) && $yoast_twitter_title ) :

				$info['title'] = $yoast_twitter_title;

				// If not title has been defined, let's check the SEO description as a 3rd string option
			elseif ( ! $info['title'] && isset( $yoast_seo_title ) && $yoast_seo_title ) :

				$info['title'] = $yoast_seo_title;

				// If not title has been defined, let's use the post title
			elseif ( ! $info['title'] ) :

				$info['title'] = convert_smart_quotes( htmlspecialchars_decode( get_the_title() ) );

			endif;

			/**
			 * TWITTER DESCRIPTION
			 */

			// Open Graph Description
			if ( ! $info['description'] && isset( $yoast_twitter_description ) && $yoast_twitter_description ) :

				$info['description'] = $yoast_twitter_description;

				// If not title has been defined, let's check the SEO description as a 3rd string option
			elseif ( ! $info['description'] && isset( $yoast_seo_description ) && $yoast_seo_description ) :

				$info['description'] = $yoast_seo_description;

				// If not, then let's use the excerpt
			elseif ( ! $info['description'] ) :

				$info['description'] = convert_smart_quotes( htmlspecialchars_decode( swp_get_excerpt_by_id( $info['postID'] ) ) );

			endif;

			/**
			 * TWITTER IMAGE
			 */

			// Open Graph Description
			if ( ! $info['imageURL'] && isset( $yoast_twitter_image ) && $yoast_twitter_image ) :

				$info['imageURL'] = $yoast_twitter_image;

			else :

				// If nothing else is defined, let's use the post Thumbnail as long as we have the URL cached
				$twitter_image = get_post_meta( $info['postID'] , 'swp_open_thumbnail_url' , true );
				if ( $twitter_image ) :
					$info['imageURL'] = $twitter_image;
				endif;

			endif;

			/**
			 * Put all the values into html
			 *
			 */

			// Check if we have everything we need for a large image summary card
			if ( $info['imageURL'] ) :
				$info['header_output'] .= PHP_EOL . '<meta name="twitter:card" content="summary_large_image">';
				$info['header_output'] .= PHP_EOL . '<meta name="twitter:title" content="' . trim( $info['title'] ) . '">';
				$info['header_output'] .= PHP_EOL . '<meta name="twitter:description" content="' . $info['description'] . '">';
				$info['header_output'] .= PHP_EOL . '<meta name="twitter:image" content="' . $info['imageURL'] . '">';
				if ( $info['swp_user_options']['twitterID'] ) :
					$info['header_output'] .= PHP_EOL . '<meta name="twitter:site" content="@' . str_replace( '@','',$info['swp_user_options']['twitterID'] ) . '">';
				endif;
				if ( $info['user_twitter_handle'] ) :
					$info['header_output'] .= PHP_EOL . '<meta name="twitter:creator" content="@' . str_replace( '@','',$info['user_twitter_handle'] ) . '">';
				endif;

				// Otherwise create a small summary card
			else :
				$info['header_output'] .= PHP_EOL . '<meta name="twitter:card" content="summary">';
				$info['header_output'] .= PHP_EOL . '<meta name="twitter:title" content="' . str_replace( '"','\'',$info['title'] ) . '">';
				$info['header_output'] .= PHP_EOL . '<meta name="twitter:description" content="' . str_replace( '"','\'',$info['description'] ) . '">';
				if ( $info['swp_user_options']['twitterID'] ) :
					$info['header_output'] .= PHP_EOL . '<meta name="twitter:site" content="@' . str_replace( '@','',$info['swp_user_options']['twitterID'] ) . '">';
				endif;
				if ( $info['user_twitter_handle'] ) :
					$info['header_output'] .= PHP_EOL . '<meta name="twitter:creator" content="@' . str_replace( '@','',$info['user_twitter_handle'] ) . '">';
				endif;
			endif;

		endif;
	endif;
	return $info;
}

/**
 * Output the CSS for custom selected colors
 *
 * @since  1.4.0
 * @access public
 * @param  array $info The array of information about the post
 * @return array $info The modified array
 */
function swp_output_custom_color( $info ) {
	if ( $info['swp_user_options']['dColorSet'] == 'customColor' || $info['swp_user_options']['iColorSet'] == 'customColor' || $info['swp_user_options']['oColorSet'] == 'customColor' ) :
		$info['header_output'] .= PHP_EOL . '<style type="text/css">.nc_socialPanel.swp_d_customColor a, html body .nc_socialPanel.swp_i_customColor .nc_tweetContainer:hover a, body .nc_socialPanel.swp_o_customColor:hover a {color:white} .nc_socialPanel.swp_d_customColor .nc_tweetContainer, html body .nc_socialPanel.swp_i_customColor .nc_tweetContainer:hover, body .nc_socialPanel.swp_o_customColor:hover .nc_tweetContainer {background-color:' . $info['swp_user_options']['customColor'] . ';border:1px solid ' . $info['swp_user_options']['customColor'] . ';} </style>';
	endif;

	if ( $info['swp_user_options']['dColorSet'] == 'ccOutlines' || $info['swp_user_options']['iColorSet'] == 'ccOutlines' || $info['swp_user_options']['oColorSet'] == 'ccOutlines' ) :
		$info['header_output'] .= PHP_EOL . '<style type="text/css">.nc_socialPanel.swp_d_ccOutlines a, html body .nc_socialPanel.swp_i_ccOutlines .nc_tweetContainer:hover a, body .nc_socialPanel.swp_o_ccOutlines:hover a { color:' . $info['swp_user_options']['customColor'] . '; }
.nc_socialPanel.swp_d_ccOutlines .nc_tweetContainer, html body .nc_socialPanel.swp_i_ccOutlines .nc_tweetContainer:hover, body .nc_socialPanel.swp_o_ccOutlines:hover .nc_tweetContainer { background:transparent; border:1px solid ' . $info['swp_user_options']['customColor'] . '; } </style>';

	endif;

	if ( $info['swp_user_options']['floatStyleSource'] == false && ($info['swp_user_options']['sideDColorSet'] == 'customColor' || $info['swp_user_options']['sideIColorSet'] == 'customColor' || $info['swp_user_options']['sideOColorSet'] == 'customColor') ) :
		$info['header_output'] .= PHP_EOL . '<style type="text/css">.nc_socialPanel.swp_d_customColor a, html body .nc_socialPanel.nc_socialPanelSide.swp_i_customColor .nc_tweetContainer:hover a, body .nc_socialPanel.nc_socialPanelSide.swp_o_customColor:hover a {color:white} .nc_socialPanel.nc_socialPanelSide.swp_d_customColor .nc_tweetContainer, html body .nc_socialPanel.nc_socialPanelSide.swp_i_customColor .nc_tweetContainer:hover, body .nc_socialPanel.nc_socialPanelSide.swp_o_customColor:hover .nc_tweetContainer {background-color:' . $info['swp_user_options']['sideCustomColor'] . ';border:1px solid ' . $info['swp_user_options']['sideCustomColor'] . ';} </style>';
	endif;

	if ( $info['swp_user_options']['floatStyleSource'] == false && ( $info['swp_user_options']['sideDColorSet'] == 'ccOutlines' || $info['swp_user_options']['sideIColorSet'] == 'ccOutlines' || $info['swp_user_options']['sideOColorSet'] == 'ccOutlines' ) ) :
		$info['header_output'] .= PHP_EOL . '<style type="text/css">.nc_socialPanel.nc_socialPanelSide.swp_d_ccOutlines a, html body .nc_socialPanel.nc_socialPanelSide.swp_i_ccOutlines .nc_tweetContainer:hover a, body .nc_socialPanel.nc_socialPanelSide.swp_o_ccOutlines:hover a { color:' . $info['swp_user_options']['sideCustomColor'] . '; }
.nc_socialPanel.nc_socialPanelSide.swp_d_ccOutlines .nc_tweetContainer, html body .nc_socialPanel.nc_socialPanelSide.swp_i_ccOutlines .nc_tweetContainer:hover, body .nc_socialPanel.nc_socialPanelSide.swp_o_ccOutlines:hover .nc_tweetContainer { background:transparent; border:1px solid ' . $info['swp_user_options']['sideCustomColor'] . '; } </style>';

		endif;
	return $info;
}

/**
 * Output the CSS to include the icon font.
 *
 * Note: This is done in the header rather than in a CSS file to
 * avoid having the fonts called from a CDN, 95% of which do not
 * support the necessary mime types to render them.
 *
 * @since  1.0.0
 * @access public
 * @param  array  $info An array of information about the post
 * @return array  $info The modified array
 */
function swp_output_font_css( $info = array() ) {
	if ( is_admin() ) :

		// Echo it if we're using the Admin Head Hook
		echo '<style>@font-face {font-family: "sw-icon-font";src:url("' . SWP_PLUGIN_URL . '/fonts/sw-icon-font.eot?ver=' . SWP_VERSION . '");src:url("' . SWP_PLUGIN_URL . '/fonts/sw-icon-font.eot?ver=' . SWP_VERSION . '#iefix") format("embedded-opentype"),url("' . SWP_PLUGIN_URL . '/fonts/sw-icon-font.woff?ver=' . SWP_VERSION . '") format("woff"),
	url("' . SWP_PLUGIN_URL . '/fonts/sw-icon-font.ttf?ver=' . SWP_VERSION . '") format("truetype"),url("' . SWP_PLUGIN_URL . '/fonts/sw-icon-font.svg?ver=' . SWP_VERSION . '#1445203416") format("svg");font-weight: normal;font-style: normal;}</style>';
	else :

		// Add it to our array if we're using the frontend Head Hook
		$info['header_output'] .= '<style>@font-face {font-family: "sw-icon-font";src:url("' . SWP_PLUGIN_URL . '/fonts/sw-icon-font.eot?ver=' . SWP_VERSION . '");src:url("' . SWP_PLUGIN_URL . '/fonts/sw-icon-font.eot?ver=' . SWP_VERSION . '#iefix") format("embedded-opentype"),url("' . SWP_PLUGIN_URL . '/fonts/sw-icon-font.woff?ver=' . SWP_VERSION . '") format("woff"), url("' . SWP_PLUGIN_URL . '/fonts/sw-icon-font.ttf?ver=' . SWP_VERSION . '") format("truetype"),url("' . SWP_PLUGIN_URL . '/fonts/sw-icon-font.svg?ver=' . SWP_VERSION . '#1445203416") format("svg");font-weight: normal;font-style: normal;}</style>';

		return $info;
	endif;
}
